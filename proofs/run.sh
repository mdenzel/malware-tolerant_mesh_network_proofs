#!/bin/bash

#
#  @title:    Malware-Tolerant Network
#  @authors:  Michael Denzel <research@michael-denzel.de>
#  @date:     2017-07-07
#
#  Shellscript to run generated ProVerif proofs for 1_get_ticket.gen, 2_veto.gen, and 3_bridge_join.gen
#

### CONFIG ###
#to exchange with statverif (if needed)
PROGRAM=proverif
##############

#checks
if [ $# -ne 1 ]; then
    echo "usage: $0 <directory>"
    exit -1
fi
echo "running $PROGRAM"

#print in filtered way
function pv_print(){
    
    #check if only user-accepted devices get a key
    substring[0]="RESULT event\(g_accept\(group\)\) ==> event\(user_accept\(group\)\) is true\."
    #or if veto is only valid if 2 group devices and a bridge agrees
    substring[1]="RESULT event\(e_veto\(pk_d_[0-9]*\)\) ==> \(event\(e_Bridge_veto\(A1,pk_d_[0-9]*\)\) && event\(e_gd_veto\(k1_[0-9]*,pk_d_[0-9]*\)\) && event\(e_gd_veto\(k2_[0-9]*,pk_d_[0-9]*\)\) && k1_[0-9]* <> k2_[0-9]*\) \|\| \(event\(e_Bridge_veto\(A2,pk_d_[0-9]*\)\) && event\(e_gd_veto\(k1_[0-9]*,pk_d_[0-9]*\)\) && event\(e_gd_veto\(k2_[0-9]*,pk_d_[0-9]*\)\) && k1_[0-9]* <> k2_[0-9]*\) \|\| \(event\(e_Bridge_veto\(B1,pk_d_[0-9]*\)\) && event\(e_gd_veto\(k1_[0-9]*,pk_d_[0-9]*\)\) && event\(e_gd_veto\(k2_[0-9]*,pk_d_[0-9]*\)\) && k1_[0-9]* <> k2_[0-9]*\) \|\| \(event\(e_Bridge_veto\(B2,pk_d_[0-9]*\)\) && event\(e_gd_veto\(k1_[0-9]*,pk_d_[0-9]*\)\) && event\(e_gd_veto\(k2_[0-9]*,pk_d_[0-9]*\)\) && k1_[0-9]* <> k2_[0-9]*\) is true."
    #check if bridge_join works correctly
    substring[2]="RESULT event\(e_d_promote\(kA\[\]\)\) ==> \(event\(e_d_accept_promotion\) && event\(e_Bridge_promote\(A1,pk_d_[0-9]*\)\) && event\(e_gd_promote\(k1_[0-9]*,pk_d_[0-9]*\)\) && event\(e_received_vote\(k1_[0-9]*\)\) && event\(e_received_vote\(k2_[0-9]*\)\) && k1_[0-9]* <> k2_[0-9]*\) \|\| \(event\(e_d_accept_promotion\) && event\(e_Bridge_promote\(A1,pk_d_[0-9]*\)\) && event\(e_gd_promote\(k2_[0-9]*,pk_d_[0-9]*\)\) && event\(e_received_vote\(k1_[0-9]*\)\) && event\(e_received_vote\(k2_[0-9]*\)\) && k1_[0-9]* <> k2_[0-9]*\) \|\| \(event\(e_d_accept_promotion\) && event\(e_Bridge_promote\(A2,pk_d_[0-9]*\)\) && event\(e_gd_promote\(k1_[0-9]*,pk_d_[0-9]*\)\) && event\(e_received_vote\(k1_[0-9]*\)\) && event\(e_received_vote\(k2_[0-9]*\)\) && k1_[0-9]* <> k2_[0-9]*\) \|\| \(event\(e_d_accept_promotion\) && event\(e_Bridge_promote\(A2,pk_d_[0-9]*\)\) && event\(e_gd_promote\(k2_[0-9]*,pk_d_[0-9]*\)\) && event\(e_received_vote\(k1_[0-9]*\)\) && event\(e_received_vote\(k2_[0-9]*\)\) && k1_[0-9]* <> k2_[0-9]*\) \|\| \(event\(e_d_accept_promotion\) && event\(e_Bridge_promote\(B1,pk_d_[0-9]*\)\) && event\(e_gd_promote\(k1_[0-9]*,pk_d_[0-9]*\)\) && event\(e_received_vote\(k1_[0-9]*\)\) && event\(e_received_vote\(k2_[0-9]*\)\) && k1_[0-9]* <> k2_[0-9]*\) \|\| \(event\(e_d_accept_promotion\) && event\(e_Bridge_promote\(B1,pk_d_[0-9]*\)\) && event\(e_gd_promote\(k2_[0-9]*,pk_d_[0-9]*\)\) && event\(e_received_vote\(k1_[0-9]*\)\) && event\(e_received_vote\(k2_[0-9]*\)\) && k1_[0-9]* <> k2_[0-9]*\) \|\| \(event\(e_d_accept_promotion\) && event\(e_Bridge_promote\(B2,pk_d_[0-9]*\)\) && event\(e_gd_promote\(k1_[0-9]*,pk_d_[0-9]*\)\) && event\(e_received_vote\(k1_[0-9]*\)\) && event\(e_received_vote\(k2_[0-9]*\)\) && k1_[0-9]* <> k2_[0-9]*\) \|\| \(event\(e_d_accept_promotion\) && event\(e_Bridge_promote\(B2,pk_d_[0-9]*\)\) && event\(e_gd_promote\(k2_[0-9]*,pk_d_[0-9]*\)\) && event\(e_received_vote\(k1_[0-9]*\)\) && event\(e_received_vote\(k2_[0-9]*\)\) && k1_[0-9]* <> k2_[0-9]*\) is true\."
    if [[ $1 =~ ${substring[$2]} ]]; then
        echo -n "YES           "
    else
        echo -n "NO            "
    fi

    #check if attacker can join group2/make another device leave group2/make group2 vote
    substring[0]="RESULT not attacker\(group2_join\[\]\) is true\."
    substring[1]="RESULT not attacker\(group2_leave\[\]\) is true\."
    substring[2]="RESULT not event\(e_received_vote\(pk\(k_g2\[\]\)\)\) is true\."
    if [[ $1 =~ ${substring[$2]} ]]; then
        echo -n "YES                "
    else
        echo -n "NO                 "
    fi

    #check that attacker does not have both bridge keys kA/kB
    substring="RESULT not attacker\(kA\[\]\) is true\."
    if [[ $1 =~ $substring ]]; then
        echo -n "YES         "
    else
        substring="RESULT not attacker\(kB\[\]\) is true\."
        if [[ $1 =~ $substring ]]; then
            echo -n "YES         "
        else
            echo -n "NO          "
        fi
    fi
    
    #check for success
    substring="RESULT not attacker(_p[0-9]*)?\(success\[\]\)\ (is false|cannot be proved)\."
    if [[ $1 =~ $substring ]]; then
        echo "success"
    else
        echo "  NO"
    fi
}


#get files (`-v` = "natural sort" => sort numbers correctly)
files=`ls -v $1/*.pv`

#print header
echo "running folder: $1"
test1="\w*1_get_ticket\.gen(/)?"
test2="\w*2_veto\.gen(/)?"
test3="\w*3_bridge_join.gen(/)?"
if [[ $1 =~ $test1 ]]; then
    printf "\n%-24s| %s | %s | %s | %s\n" file " auth " "group2 join secure" "kA/kB secure" "run-through"
    testcase=0
elif [[ $1 =~ $test2 ]]; then
    printf "\n%-24s| %s | %s | %s | %s\n" file " veto " "group2 leave secure" "kA/kB secure" "run-through"
    testcase=1
elif [[ $1 =~ $test3 ]]; then
    printf "\n%-24s| %s | %s | %s | %s\n" file "promote" "group2 vote secure" "kA/kB secure" "run-through"
    testcase=2
else
    echo "unknown folder: '$1'"
    exit -1
fi
echo "--------------------------------------------------------------------------------"
#iterte over them
for f in $files; do
    #print file (without path)
    fx=`echo $f | cut -f3 -d"/"`
    printf "%-27s" $fx

    #call proverif
    filter='grep -B 1 "RESULT"'
    res=`$PROGRAM $f | sed '/^\s*$/ d' | eval "$filter"`

    #print in a filtered way (as "table")
    res=`echo $res` #kill new lines '\n'
    pv_print "$res" $testcase
done
